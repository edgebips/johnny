// -*- mode: protobuf -*-
// Chains database for Johnny.
//
// This schema contains information about the chains of trades. This essentially
// an interim database in a text file, which will eventually probably evolve
// into a real database. Because we require a lot of manipulation of the
// history, this is currently done by hand-editing.
//
//   Copyright (C) 2021  Martin Blais
//   License: GNU GPLv2

syntax = "proto2";

package johnny;

// The status of a chain. This is produced in the output configuration after an
// import, and is intended for the user to review and update, to confirm the
// current state of a chain's definition.
//
// A chain begins its life as `ACTIVE`, automatically identified and produced by
// heuristics. From there, if you close the position, it may move to `CLOSED`.
// When the chain is complete, it should be marked `FINAL` by the user (in which
// case it will never change or be matched against any new trades). Previously
// defined chains that have become invalid, due to, e.g. changes in the code, or
// otherwise, will be marked `IGNORE` in order to avoid deleting their dta.
//
// The chains list is used as input but also as output. Efforts are made to
// minimize diffs between them.
enum ChainStatus {
  // An automatically identified and updated chain. This is the default value.
  // The `ids` from those chains will be pulled out but new transactions may be
  // matched against them. `auto_ids` will be ignored from the input, but it
  // will be updated in the output for the user to inspect, recreated from
  // scratch automatically on all further runs. These are produced for you to
  // look at and upgrade their status to `FINAL`. These are considered active
  // chains.
  ACTIVE = 0;

  // An automatically identified, and closed chain, similar to `ACTIVE`, but
  // whose position at the end of the trade is empty. The difference with
  // `ACTIVE` is that the resulting inventory has no residual position (all
  // positions opened in the chain have been closed). Those should be verified
  // by the user and marked `FINAL` manually.
  CLOSED = 1;

  // A manually verified and finalized chain. Those are marked by you, the user,
  // and the corresponding transactions are pulled out as they are defined from
  // `ids` and never matched against any other transaction rows in the log.
  // `auto_ids` are ignored (and cleared from the output). Make your chain final
  // when it has been completed and need never be added or removed any more
  // trades ever again. All the opened positions should be closed by the end of
  // those chain, defining `FINAL` chains with open position is an error (the
  // software may verify this invariant.)
  FINAL = 2;

  // For chains that were read from the input but which aren't identified by the
  // algorithm anymore. We use the `IGNORE` type just to avoid deleting
  // potentially useful data. Technically, all the `ids` probably fail. This
  // type of chain may get removed eventually, as we refine the workflow.
  IGNORE = 3;
}

// A database of chains, just a container for the chains db file.
message Chains {
  repeated Chain chains = 1;
  repeated SplitTransaction split_transactions = 2;
}

// A trade chain.
message Chain {
  // The chain id of a trade. This is a unique string computed in the front end.
  optional string chain_id = 1;

  // Status of the chain. If not set, this is equivalent to AUTO.
  optional ChainStatus status = 2;

  // User-associated trade group or line of business. This can be used to split
  // up your trades in different groups, e.g. "MemeStocks", "ShortPremium",
  // "LongStock".
  optional string group = 3;

  // Initial strategy used, e.g. "Strangle", "BrokenWingButterfly", etc. The
  // software may attempt to set a value for this, but you can override it in
  // the configuration file.
  optional string strategy = 4;

  // Any arbitrary tags that can be associated with this chain. These aren't
  // rendered in the tables, but they can find other purposes, it's convenient
  // to have them.
  repeated string tags = 5;

  // User-provided description. Free-form, may span multiple lines (include
  // newlines).
  optional string comment = 6;

  // Annual volatility at the point of entry, in fractional points, e.g., 20%
  // annual vol is 0.20.
  optional float vol_implied = 16;
  optional float vol_realized = 17;

  // Probability of profit of the strategy at entry, used to compute or set a
  // target. This is very important, as it allows us to semi-automate trade
  // management. We use Kelly's criterion to fill in the win/loss chain P/L
  // targets from this.
  //
  // IMPORTANT: Note that this is not the same as the probability of profit of
  // the options position itself (if they were held to expiration), but the POP
  // related to the particulars of the underlying management strategy, e.g.,
  // "P50" if you were to take your winners at 50% like TT does (they like to
  // ride theta decay through the first half of the expiration time to avoid
  // gamma risk). I do other things. But in any case, you input the POP here as
  // per your forecast based on your strategy.
  optional float pop = 7;

  // Win target fraction. This declares out intended exit point for a winning
  // trade. For instance, if this is set to 0.25, we're shooting to take the
  // trade off at 25% of credit received (if selling options). This is then used
  // to infer the win/loss chain P/L targets below. If this is unset, we assume
  // a default value of 0.50 (50%), which is riding the first half of the
  // remaining duration of the position.
  optional float target = 8;

  // Cross-reference chain ids. A list of chain ids that are related to the
  // given chain. This can be used by a presentation layer. For example, a
  // protective position can refer to the position it protects.
  repeated string xrefs = 9;

  // Join id. An optional alternative chain id that can be used to join together
  // multiple chains. This exists because we need to keep certain chains
  // separate from each other for taxe purposes, though logically they are
  // considered together. For example, a taxable long-term position will be
  // treated from a tax standpoint as its covered calls, which will be treated
  // as short term gain/loss. So in that case, you would create two distinct
  // chains to use for taxation, and trigger an option to join those chains
  // together while reporting trade pnls.
  //
  // This id will take the place of the chain_id, and join together the list of
  // transactions with the same join ids. If it is not set, the chain is not
  // joined.
  optional string join_id = 14;

  // Manual long-term or short-term tax identification for the IRS. Normally we
  // can identify LT/ST automatically for each match, but this is a flag the
  // user can insert for validation. Default is false.
  optional bool long_term = 15;

  // Explicit chain P/L win/loss targets. These can be input to override the
  // computed targets derived by setting `pop`. For trading static deltas, you
  // can express your view by selecting appropriate targets. Monitoring can then
  // compute completion fractions and alerts when the P/L loss target is
  // reached.
  //
  // Note that this is not the net-liq of the resultant position; the reason for
  // this is to account for adjustments during the trade's lifetime. We bake our
  // targets at the begininng of the chain, and derive further net-liq targets
  // based on the Kelly-derived win/loss targets off of the total accumulated
  // credits on the chain.
  optional float pnl_win = 10;
  optional float pnl_loss = 11;

  // If this is present, an explicit list of transaction ids that are part of
  // the trade. All the rows matching these transactions will be automatically
  // removed from the table and extracted as a unique chain. Make sure that
  // matches without these trades can resolve. `auto_ids` are fields for `ids`
  // but which were filled automatically. Remove the `auto_` prefix in order to
  // make these permanent.
  repeated string ids = 12;
  repeated string auto_ids = 13;
}

// Declaration of asset vs. asset-class mapping.
message Asset {
  // Normalized instrument name.
  optional string instrument = 1;

  // Corresponding asset class, e.g. "EquityIndex", "Metals", "Rates", "Ags",
  // "Currencies", "Energy".
  optional string class = 2;

  // Factor. This is typically a sub-category of asset class. For example, asset
  // class would be "Metals", and factor might be "Copper" for FCX, COPX and
  // /HG.
  optional string factor = 3;
}

// A transaction to be split manually into two, in order to handle long-term vs.
// short-term positions. (In theory this would be possible to do automatically
// but at the time of taxation I hadn't implemented this feature and had few
// enough long-term positions I could handle them explicitly like this. If we
// make this automatic eventually this should be made to go away.)
message SplitTransaction {
  // The original transaction id to split.
  optional string id = 1;

  // The amounts to split it into. Note that the sum of those amounts must be
  // the same as that of the original transaction.
  message Part {
    // The new transaction id.
    optional string id = 1;
    // The size it is for.
    optional int32 quantity = 2;
  }
  repeated Part parts = 2;
}
