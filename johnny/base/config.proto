// -*- mode: protobuf -*-
// Configuration for Johnny.
//
// This schema is designed for input to the application that contains account
// configuration setups and manual clusterings for trades (it is not always
// possible to split logical trades correctly automatically in the same
// account).
//
//   Copyright (C) 2021  Martin Blais
//   License: GNU GPLv2
//
// A quick overview of the structure of our configuration. First, an overview of
// the process of importing the data, which is mostly what Johnny is about:
//
// - Each account is defined at an institution. An account is distinct from the
//   platform through which information is obtained. For example, "Ameritrade"
//   has a website that provides downloadable transaction data but we get more
//   complete information by using its "thinkorswim" platform (which is also
//   part of Ameritrade). Tastytrade (formerly Tastyworks) has CSV downloads but
//   we've been able to reverse engineer some of its API enough to get
//   transaction data more reliably sync'ed to a key/value store. Therefore, the
//   account configuration includes optional support for multiple sources of
//   data depending on what types of imports are supported. See each source's
//   `config.proto` file for details.
//
// - Each of the accounts have three possible types of outputs:
//
//   1. A list of transaction rows, including dividends (see `transactions.proto`).
//   2. A list of prices for positions to mark unrealized gains (see `positions.proto`).
//   3. A list of "non-trade" rows, which is basically everything else, fees,
//     adjustments, transfers, sweeps, etc (see `nontrades.proto`).
//
//   The inputs required to produce these three normalized tables of data vary
//   depending on the source.
//
// - After producing these three normalized tables of data, data from all the
//   sources are merged together to form "chains", which are logical groupings
//   of transactions rows used to identity a set of related trading activity.
//   This is where trades are matched and clustered, partially automatically.
//   Each "chain" thus produced can be reduced to a single transaction with its
//   own associated P/L. A table and database of those chains is produced as the
//   primary output of Johnny. Conversion to Beancount may be done at the row
//   level, but also a more succint form by flattening all the transactions of a
//   particular chain into a single transaction reflecting the P/L of the
//   associated "trade."
//
//   Non-trades are going to get used to produce individual Beancount
//   transactions as they are not reducible to chains of related trading
//   activity.

syntax = "proto2";

import "johnny/sources/thinkorswim_csv/config.proto";
import "johnny/sources/tastyworks_api/config.proto";
import "johnny/sources/interactive_csv/config.proto";

package johnny;

// Configuration for returns script.
message Config {
  // Input configuration.
  optional Inputs input = 1;

  // Output configuration.
  optional Outputs output = 2;

  // Mapping of futures options months to their corresponding underlying options
  // months. This is deprecated. Make sure you have a recent version of the
  // 'mulmat' library installed in order to transaction options codes to
  // corresponding underlying codes.
  optional FutOptMonthMapping futures_option_month_mapping = 3 [deprecated = true];

  // Options for the presentation of results.
  optional Presentation presentation = 4;
}

// Configuration for inputs to be imported.
message Inputs {
  // A list of account sources to pull data from.
  repeated Account accounts = 1;

  // A tabular file to contain the input chain data.
  // This is updated to produce `Output.chains`.
  optional string chains_db = 2;
}

// Configuration for outputs and databases.
message Outputs {
  // A tabular file to contain the precomputed chain data. This is basically an
  // updated version in `Inputs.chains_db`, modified to incorporate newly
  // imported data.
  optional string chains_db = 1;

  // A tabular file to contain the processed and normalized transactions.
  // Default file format is a pickle db. The CSV is redundant, used for backups.
  optional string transactions_pickle = 2;
  optional string transactions_csv = 3;
  optional string transactions_parquet = 4;

  // A tabular file to contain the processed and normalized positions.
  // Default file format is a pickle db. The CSV is redundant, used for backups.
  optional string positions_pickle = 5;
  optional string positions_csv = 6;
  optional string positions_parquet = 7;

  // A tabular file to contain the precomputed chain data.
  // Default file format is a pickle db. The CSV is redundant, used for backups.
  optional string chains_pickle = 8;
  optional string chains_csv = 9;
  optional string chains_parquet = 10;
}

// This is a mapping of (option-product-code, month-code) to
// (futures-product-code, month-code). Options are offered on a monthly basis,
// but the underlying futures contract isn't necessarily offered for every month
// (depends on seasonality sometimes), so the underlying is sometimes for the
// same month (and the options expire a few days ahead of the futures) or for the
// subsequent month (in which case multiple months are applicable to the same
// underlying).
//
// CME has definitions on this, like this: "/SI: Monthly contracts listed for 3
// consecutive months and any Jan, Mar, May, and Sep in the nearest 23 months and
// any Jul and Dec in the nearest 60 months."
// https://www.cmegroup.com/trading/metals/precious/silver_contractSpecs_options.html
//
// We need to eventually encode all those rules as logic, as some input files
// (notably, from TOS) sometimes only produce the options code and in order to
// produce a normalized symbol we need both.
message FutOptMonthMapping {
  message Item {
    optional string option_product = 1;
    optional string option_month = 2;
    optional string future_product = 3;
    optional string future_month = 4;
  };
  repeated Item months = 1;
}

// Options for the presentation of results.
message Presentation {
  // Groups whose chains to ignore for presentation. This can be used to exclude
  // regular (i.e., non-trading) investments.
  repeated string ignore_groups = 1;

  // Tags whose chains to ignore for presentation. This can be used to exclude
  // particular trade chains.
  repeated string ignore_tags = 2;

  // Minimum date before which the chains must be excluded.
  optional string ignore_mindate = 3;
}

// The declaration of an account. Only declared accounts are ingested.
message Account {
  // A short and unique nickname or alias for the account. This should be
  // something you don't mind sharing publicly. The account name will me
  // replaced by this nickname for privacy reasons. If this isn't set, the
  // account number will be kept as is.
  optional string nickname = 1;

  // Short name alternative, e.g. for tabs in a spreadsheet.
  optional string sheetname = 2;

  // Beancount account names.
  optional BeancountAccounts beancount = 3;

  // A filename telling the importer where to find a CSV file with the initial
  // positions at the beginning of the transactions log. This file must contain
  // the following columns:
  //
  // * `transaction_id`: A unique transaction id for that account.
  // * `datetime`: The date at which to open the position
  // * `symbol`: The name of the symbol, including future and equity options.
  // * `instruction`: 'BUY' or 'SELL'
  // * `quantity`: Absolute number of units.
  // * `cost`: The total cost of that position (not per-unit).
  //
  // Other columns, if present, will be ignored. If this is provided, the import
  // will create these positions at the front of the transactions log history
  // import.
  optional string initial_positions = 4;

  // Source-specific configuration.
  oneof source {
    johnny.ameritrade.Config ameritrade = 5;
    johnny.tastytrade.Config tastytrade = 6;
    johnny.interactive.Config interactive = 7;
  }

  // Asset types to exclude from the given source. This can be used to
  // selectively remove some types of assets, like, crypto.
  repeated InstrumentType exclude_instrument_types = 8;

  // Configuration for move-files: filename-pattern to destination directory.
  map<string, string> move_files = 9;
}

// Instrument types. These values correspond to the strings in the `instype`
// columns. See the `instype` column definition for details.
enum InstrumentType {
  Unknown         = 1;
  Equity          = 2;
  EquityOption    = 3;
  NonEquityOption = 4;
  Collectibles    = 5;
  Future          = 6;
  FutureOption    = 7;
  Index           = 8;
  IndexOption     = 9;
  Crypto          = 10;
}

// A set of accounts for conversion to Beancount.
message BeancountAccounts {
  optional string account_assets = 1;
  optional string account_cash = 2;
  optional string account_pnl = 3;
  optional string account_commissions = 4;
  optional string account_fees = 5;
}
