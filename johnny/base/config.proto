// -*- mode: protobuf -*-
// Configuration for Johnny.
//
// This schema is designed for input to the application that contains account
// configuration setups and manual clusterings for trades (it is not always
// possible to split logical trades correctly automatically in the same
// account).
//
//   Copyright (C) 2021  Martin Blais
//   License: GNU GPLv2

syntax = "proto2";

package johnny;

// Configuration for returns script.
message Config {
  // Input configuration.
  optional Inputs input = 1;

  // Output configuration.
  optional Outputs output = 2;

  // Mapping of futures options months to their corresponding underlying options
  // months. This is deprecated. Make sure you have a recent version of the
  // 'mulmat' library installed in order to transaction options codes to
  // corresponding underlying codes.
  optional FutOptMonthMapping futures_option_month_mapping = 3 [deprecated = true];

  // Options for the presentation of results.
  optional Presentation presentation = 4;

  // Betas and index prices databases.
  optional FallbackDB fallback_database = 5;
}

// Configuration for inputs to be imported.
message Inputs {
  // A list of account sources to pull data from.
  repeated Account accounts = 1;

  // A tabular file to contain the input chain data.
  // This is updated to produce `Output.chains`.
  optional string chains_db = 2;
}

// Configuration for outputs and databases.
message Outputs {
  // A tabular file to contain the precomputed chain data.
  // This is a cleaned up and updated version in `Inputs.chains_db`.
  optional string chains_db = 1;

  // A tabular file to contain the processed and normalized transactions.
  // Default file format is a pickle db. The CSV is redundant, used for backups.
  optional string transactions = 2;
  optional string transactions_csv = 3;

  // A tabular file to contain the precomputed chain data.
  // Default file format is a pickle db. The CSV is redundant, used for backups.
  optional string chains = 4;
  optional string chains_csv = 5;
}

// This is a mapping of (option-product-code, month-code) to
// (futures-product-code, month-code). Options are offered on a monthly basis,
// but the underlying futures contract isn't necessarily offered for every month
// (depends on seasonality sometimes), so the underlying is sometimes for the
// same month (and the options expire a few days ahead of the futures) or for the
// subsequent month (in which case multiple months are applicable to the same
// underlying).
//
// CME has definitions on this, like this: "/SI: Monthly contracts listed for 3
// consecutive months and any Jan, Mar, May, and Sep in the nearest 23 months and
// any Jul and Dec in the nearest 60 months."
// https://www.cmegroup.com/trading/metals/precious/silver_contractSpecs_options.html
//
// We need to eventually encode all those rules as logic, as some input files
// (notably, from TOS) sometimes only produce the options code and in order to
// produce a normalized symbol we need both.
message FutOptMonthMapping {
  message Item {
    optional string option_product = 1;
    optional string option_month = 2;
    optional string future_product = 3;
    optional string future_month = 4;
  };
  repeated Item months = 1;
}

// Options for the presentation of results.
message Presentation {
  // Groups whose chains to ignore for presentation. This can be used to exclude
  // regular (i.e., non-trading) investments.
  repeated string ignore_groups = 1;

  // Tags whose chains to ignore for presentation. This can be used to exclude
  // particular trade chains.
  repeated string ignore_tags = 2;

  // Minimum date before which the chains must be excluded.
  optional string ignore_mindate = 3;
}

// The declaration of an account source. Only declared accounts are ingested.
// A declaration might look like this:
//   accounts {
//     nickname: "tasty"
//     logtype: TRANSACTIONS
//     module: "johnny.sources.tastyworks_csv.transactions"
//     source: "/home/joesmith/Downloads/*-AccountStatement.csv"
//   }
//
message Account {
  // A short and unique nickname or alias for the account. This should be
  // something you don't mind sharing publicly. The account name will me
  // replaced by this nickname for privacy reasons. If this isn't set, the
  // account number will be kept as is.
  optional string nickname = 1;

  // Short name alternative, e.g. for tabs in a spreadsheet.
  optional string sheetname = 7;

  // Beancount account names.
  optional BeancountAccounts beancount = 8;

  // Importer type: transactions or positions.
  enum LogType {
    TRANSACTIONS = 1; // Trades of instruments.
    POSITIONS = 2;    // Positions snapshot in time.
    OTHER = 3;        // Non-trades and other balance-affecting entries.
  }
  repeated LogType logtype = 2;

  // Source module to use. This is a Python module-level path. This can be of
  // the form 'johnny.source.tastyworks_csv.transactions' for example.
  optional string module = 3;

  // A globbing pattern, URL, or other data telling the importer where to find
  // the files to import. If more than a single file matches, only the latest
  // file (by timestamp) will be imported. This is in essence, the configuration
  // across all possible sources, which are expected to be local files. In order
  // to contain dependencies, updating these local caches of remote transactions
  // logs should be done in separate programs using whichever APIs are
  // necessary; this library merely imports them into a single normalized
  // database.
  optional string source = 4;

  // A filename telling the importer where to find a CSV file with the initial
  // positions at the beginning of the transactions log. This file must contain
  // the following columns:
  //
  // * `transaction_id`: A unique transaction id for that account.
  // * `datetime`: The date at which to open the position
  // * `symbol`: The name of the symbol, including future and equity options.
  // * `instruction`: 'BUY' or 'SELL'
  // * `quantity`: Absolute number of units.
  // * `cost`: The total cost of that position (not per-unit).
  //
  // Other columns, if present, will be ignored. If this is provided, the import
  // will create these positions at the front of the transactions log history
  // import.
  optional string initial = 5;

  // Asset types to exclude from the given source. This can be used to
  // selectively remove some types of assets, like, crypto.
  repeated InstrumentType exclude_instrument_types = 6;
}

// Instrument types. These values correspond to the strings in the `instype`
// columns. See the `instype` column definition for details.
enum InstrumentType {
  Unknown         = 0;
  Equity          = 1;
  EquityOption    = 2;
  NonEquityOption = 3;
  Collectibles    = 4;
  Future          = 5;
  FutureOption    = 6;
  Index           = 7;
  IndexOption     = 8;
  Crypto          = 9;
}

// A set of accounts for conversion to Beancount.
message BeancountAccounts {
  optional string account_assets = 1;
  optional string account_cash = 2;
  optional string account_pnl = 3;
  optional string account_commissions = 4;
  optional string account_fees = 5;
}

// A static database of (date, underlying, beta, SPY-price) tuples used to fill
// in where brokers do not provide information. This is used to fill in
// information about SPY-weighted dollar deltas for Interactive Brokers. Fill
// this in to avoid having to support pulling historical data, if you have just
// a few datapoints.
message FallbackDB {
  repeated DatedValue betas = 1;
  repeated DatedValue index_prices = 2;
}

message DatedValue {
  // Symbol of the underlying name.
  optional string symbol = 1;

  // YYYY-MM-DD date of the beta.
  optional string date = 2;

  // Beta value.
  optional float value = 3;
}
