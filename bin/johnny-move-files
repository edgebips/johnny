#!/usr/bin/env python3
"""Gather files from likely download locations.

Move files from likely download locations to locations where they are configured
to be found and imported from. This is for CSV file imports, typically. We
download the files wherever - lazily, really - and this is run before import to
find all those files and put them in a final resting place where we collect them
for import.
"""
__copyright__ = "Copyright (C) 2021  Martin Blais"
__license__ = "GNU GPLv2"

import datetime
import os
import re
import logging
import shutil
from os import path
from typing import Optional

import click

from johnny.base import config as configlib


HOME = os.getenv("HOME")
DOWNLOAD_DIRS = [HOME, path.join(HOME, "Downloads")]


@click.command()
@click.option(
    "--config",
    "-c",
    type=click.Path(exists=True),
    help="Configuration filename. Default to $JOHNNY_CONFIG",
)
@click.option(
    "--extra-downloads",
    "-d",
    type=click.Path(exists=True),
    help="An extra download directory to look into.",
)
def main(config: Optional[str], extra_downloads: Optional[str]):
    # Read the input configuration.
    filename = configlib.GetConfigFilenameWithDefaults(config)
    config = configlib.ParseFile(filename)

    # Get the list of regular expressions of files to move.
    regex_map = {}
    for account in config.input.accounts:
        regex_map.update(
            {
                regex: path.expandvars(destination)
                for regex, destination in account.move_files.items()
            }
        )

    download_dirs = DOWNLOAD_DIRS
    if extra_downloads:
        download_dirs.append(extra_downloads)

    # Look for them in all downloads directories.
    for directory in download_dirs:
        for regex, destination in regex_map.items():
            for filename in os.listdir(directory):
                if re.match(regex, filename):
                    src = path.join(directory, filename)

                    # If there's no date in the filename, add one as prefix.
                    if not re.search(
                        r"(\d\d\d\d.\d\d.\d\d|\d\d.\d\d.\d\d\d\d)", filename
                    ):
                        date = datetime.datetime.fromtimestamp(
                            path.getmtime(src)
                        ).date()
                        filename = "{:%Y-%m-%d}.{}".format(date, filename)

                    logging.info(f"Moving {src} to {destination}")
                    os.makedirs(destination, exist_ok=True)
                    dst = path.join(destination, path.basename(src))
                    if path.exists(dst):
                        os.remove(dst)
                    shutil.move(src, destination)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, format="%(levelname)-8s: %(message)s")
    main()
