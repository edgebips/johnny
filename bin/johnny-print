#!/usr/bin/env python3
"""Command-line input file converter and printer for Johnny.

This tool
- Auto-detects all input sources and their types, from filenames and directories
  of files.
- Parses them, and normalizes them.
- Validates them.
- Prints out their contents on the command-line (or to a file).

This tool is also able to join transactions and positions and print out
aggregates at the chain (trade) level.

The purpose of this tool is to
- Make it straightforward to debug input file parsing and conversion,
- Work from the command-line.

NOTE: This script will be replaced to print from the local database eventually.
We will have an import stage that does all the processing at once, and this will
be used to extract a portion of that local processed file, or we will remove
this.
"""

__copyright__ = "Copyright (C) 2021  Martin Blais"
__license__ = "GNU GPLv2"

from typing import List, Optional
import copy
import logging
import os
import re
import sys

import click

from johnny.base import discovery
from johnny.base import mark
from johnny.base import chains as chainslib
from johnny.base import config as configlib
from johnny.base import instrument
from johnny.base.etl import petl, Table
from johnny.exports import beancount as be


def SelectAccount(config: configlib.Config, account_regex: str):
    """Account selection by nickname."""
    accounts = [
        account
        for account in config.input.accounts
        if re.search(account_regex, account.nickname)
    ]
    if len(accounts) != 1:
        valid_names = [account.nickname for account in config.input.accounts]
        raise ValueError(
            f"Invalid or duplicate account name: {account_regex}; valid: {valid_names}"
        )
    return next(iter(accounts))


def PrintTable(table: Table, ctx: click.Context):
    """Print the table, given the options."""
    if ctx.obj["expand"]:
        table = instrument.Expand(table, "symbol")
    # Convert null values just before printing. Display only.
    table = table.replaceall(None, "")  ## TODO(blais): Uncomment this.
    print(table.lookallstr())


@click.group()
@click.option(
    "--config", "-c", help="Configuration filename. Default to $JOHNNY_CONFIG"
)
@click.option(
    "--expand", "-e", is_flag=True, help="Expand instrument symbol before output"
)
@click.pass_context
def cli(ctx: click.Context, config: Optional[str], expand: bool):
    "General purpose command-line printer tool."
    logging.basicConfig(level=logging.INFO, format="%(levelname)-8s: %(message)s")
    ctx.obj["expand"] = expand
    filename = configlib.GetConfigFilenameWithDefaults(config)
    ctx.obj["config"] = configlib.ParseFile(filename)


@cli.command()
@click.pass_context
def config(ctx: click.Context):
    "Parse, validate and print the configuration."
    print(ctx.obj["config"])


@cli.command()
@click.argument("account_regex")
@click.pass_context
def transactions(ctx: click.Context, account_regex: str):
    "Import and normalize transactions."
    account = SelectAccount(ctx.obj["config"], account_regex)
    table = discovery.ImportTransactions(account)
    PrintTable(table, ctx)


@cli.command()
@click.argument("account_regex")
@click.pass_context
def nontrades(ctx: click.Context, account_regex: str):
    "Import and normalize non-trades."
    account = SelectAccount(ctx.obj["config"], account_regex)
    table = discovery.ImportNonTrades(account)
    PrintTable(table, ctx)


@cli.command()
@click.argument("account_regex")
@click.pass_context
def positions(ctx: click.Context, account_regex: str):
    "Import and normalize positions."
    account = SelectAccount(ctx.obj["config"], account_regex)
    table = discovery.ImportPositions(account)
    PrintTable(table, ctx)


@cli.command()
@click.pass_context
def marks(ctx: click.Context):
    "Print out marks."
    config = ctx.obj["config"]
    transactions = petl.frompickle(config.output.transactions_pickle)
    positions = petl.frompickle(config.output.positions_pickle)
    # Mark the transactions.
    price_map = mark.GetPriceMap(transactions, positions)
    transactions = mark.Mark(transactions, price_map)
    # Print out the marks.
    marks = transactions.selecteq("rowtype", "Mark")
    print(marks.lookallstr())


@cli.command()
@click.pass_context
def imported_transations(ctx: click.Context):
    "Print imported transactions (from database)."
    config = ctx.obj["config"]
    imported = petl.frompickle(config.output.transactions_pickle)
    print(imported.lookallstr())


@cli.command()
@click.pass_context
def imported_nontrades(ctx: click.Context):
    "Print imported non-trades (from database)."
    config = ctx.obj["config"]
    imported = petl.frompickle(config.output.nontrades_pickle)
    print(imported.lookallstr())


@cli.command()
@click.pass_context
def imported_positions(ctx: click.Context):
    "Print imported positions (from database)."
    config = ctx.obj["config"]
    imported = petl.frompickle(config.output.positions_pickle)
    print(imported.lookallstr())


@cli.command()
@click.pass_context
def imported_chains(ctx: click.Context):
    "Print imported chains (from database)."
    config = ctx.obj["config"]
    chains = petl.frompickle(config.output.chains_pickle)
    print(chains.lookallstr())


@cli.command()
@click.option("--account", "-a", help="Optional account to filter with.")
@click.pass_context
def export_nontrades(ctx: click.Context, account: Optional[str]):
    "Convert nontrades to Beancount format."
    config = ctx.obj["config"]
    imported = petl.frompickle(config.output.nontrades_pickle)
    if account:
        imported = imported.selecteq("account", account)
    be.ExportNonTrades(config, imported, sys.stdout)


if __name__ == "__main__":
    cli(obj={})
