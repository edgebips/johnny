#!/usr/bin/env python3
"""Import new transactions from sources into our local database.

This tool reads a configuration file with a specification for transactions and
positions input sources for each account, normalizes them, runs the chains
processing code and ingests them everything to its own local database of
normalized and matched transactions. The local database is the source of data
for various tools, such as Johnny's trade log and eventually monitoring tools as
well. This is intended to be runnable mid-day.
"""

__copyright__ = "Copyright (C) 2021  Martin Blais"
__license__ = "GNU GPLv2"

import contextlib
import collections
import functools
import logging
import traceback
import time
from typing import List, Optional, Tuple

import click
import simplejson

from johnny.base import chains as chainslib
from johnny.base import config as configlib
from johnny.base import discovery
from johnny.base import instrument
from johnny.base import mark
from johnny.base import split
from johnny.base import transactions as txnlib
from johnny.base import positions as poslib
from johnny.base import nontrades as ntlib
from johnny.base.etl import Table, petl
from johnny.utils import timing


@click.command()
@click.option(
    "--config",
    "-c",
    type=click.Path(exists=True),
    help="Configuration filename. Default to $JOHNNY_CONFIG",
)
@click.option(
    "--light",
    "-q",
    is_flag=True,
    help="Lightweight import; reuse transactions nad just recompute the chains.",
)
def import_(config: Optional[str], light: bool):
    """Parse the configuration, the sources, transform, and save."""

    logging.basicConfig(level=logging.INFO, format="%(levelname)-8s: %(message)s")
    logger = logging.getLogger()
    log = functools.partial(timing.log_time, log_timings=logger.info)

    # Read the input configuration.
    with log("read_config"):
        filename = configlib.GetConfigFilenameWithDefaults(config)
        config = configlib.ParseFile(filename)

    # Read the past transactions.
    with log("read_log"):
        if light:
            transactions = petl.frompickle(config.output.transactions_pickle)
            transactions = transactions.cutout("chain_id")
        else:
            transactions = discovery.ImportAllTransactions(config, logger)

        if light:
            nontrades = petl.frompickle(config.output.nontrades_pickle)
        else:
            nontrades = discovery.ImportAllNonTrades(config, logger)

        positions = discovery.ImportAllPositions(config, logger)

    # Mark the transactions at the price at the time of import.
    with log("mark"):
        price_map = mark.GetPriceMap(transactions, positions)
        ptransactions = mark.Mark(transactions, price_map)

    # Calculate the chains and partial sums.
    with log("read_chains"):
        chains_db = configlib.ReadChains(config.input.chains_db)
    with log("split_positions"):
        ptransactions = split.SplitTransactions(
            chains_db.split_transactions, ptransactions
        )

    with log("chains"):
        ctransactions, cchains_db = chainslib.ChainTransactions(
            ptransactions, chains_db
        )
    with log("reduce"):
        chains, ctransactions = chainslib.TransactionsTableToChainsTable(
            ctransactions, cchains_db
        )

    # Write out the imported databases.
    with log("output_tables"):
        with log("output_tables transactions"):
            if config.output.transactions_pickle:
                ctransactions.topickle(config.output.transactions_pickle)
            if config.output.transactions_csv:
                ctransactions.tocsv(config.output.transactions_csv)
            if config.output.transactions_parquet:
                txnlib.ToParquet(ctransactions, config.output.transactions_parquet)

        with log("output_tables non-trades"):
            if config.output.nontrades_pickle:
                nontrades.topickle(config.output.nontrades_pickle)
            if config.output.nontrades_csv:
                nontrades.tocsv(config.output.nontrades_csv)
            if config.output.nontrades_parquet:
                ntlib.ToParquet(nontrades, config.output.nontrades_parquet)

        with log("output_tables positions"):
            if config.output.positions_pickle:
                positions.topickle(config.output.positions_pickle)
            if config.output.positions_csv:
                positions.tocsv(config.output.positions_csv)
            if config.output.positions_parquet:
                poslib.ToParquet(positions, config.output.positions_parquet)

        with log("output_tables chains"):
            if config.output.chains_pickle:
                chains.topickle(config.output.chains_pickle)
            if config.output.chains_csv:
                chains.tocsv(config.output.chains_csv)
            if config.output.chains_parquet:
                chainslib.ToParquet(chains, config.output.chains_parquet)

    with log("output_config"):
        with open(config.output.chains_db, "w") as outfile:
            print(configlib.ToText(cchains_db), file=outfile)


if __name__ == "__main__":
    import_()
